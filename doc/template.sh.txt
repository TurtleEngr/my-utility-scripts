========================================
NAME SCRIPTNAME
    SHORT-DESCRIPTION

SYNOPSIS
            SCRIPTNAME [-o "Name=Value"] [-h] [-H pStyle] [-l] [-v] [-x] [-T pTest]

DESCRIPTION
    Describe the script.

OPTIONS
    -o Name=Value
        [This is a placeholder for user options.]

    -h  Output this "long" usage help. See "-H long"

    -H pStyle
        pStyle is used to select the type of help and how it is formatted.

        Styles:

            short|usage - Output short usage help as text.
            long|text   - Output long usage help as text.
            man         - Output long usage help as a man page.
            html        - Output long usage help as html.
            md          - Output long usage help as markdown.
            int         - Also output internal documentation as text.
            int-html    - Also output internal documentation as html.
            int-md      - Also output internal documentation as markdown.

    -l  Send log messages to syslog. Default is to just send output to
        stderr.

    -v  Verbose output. Default is is only output (or log) messages with
        level "warning" and higher.

        -v - output "notice" and higher.

        -vv - output "info" and higher.

    -x  Set the gpDebug level. Add 1 for each -x. Or you can set gpDebug
        before running the script.

        See: fLog and fLog2 (Internal documentation)

    -T "pTest"
        Run the unit test functions in this script.

        "-T all" will run all of the functions that begin with "test".

        "-T list" will list all of the test functions.

        "-T com" will run all the tests for bash-com.inc

        Otherwise, "pTest" should match the test function names separated
        with spaces (between quotes).

        For more help, use the "-H int" option.

        For more details about shunit2 (or shunit2.1), see
        shunit2/shunit2-manual.html Source
        <https://github.com/kward/shunit2>

        shunit2.1 has a minor change that defaults to the no-color option.

  Globals
    These are globals that may affect how the script runs. Just about all of
    these globals that begin with "gp" can be set and exported before the
    script is run. That way you can set your own defaults, by putting them
    in your ~/.bashrc or ~/.bash_profile files.

    The the "common" CLI flags will override the initial variable settings.

    Tmp This is the top directory where tmp file will be put.

        Default: /tmp/$USER/SCRIPTNAME/

        if gpDebug is 0, temp files will usually include the PID.

    gpLog
        If set to 0, log messages will only be sent to stderr.

        If set to 1, log messages will be sent to stderr and syslog. See
        gpFacility for more details.

        See -l, fLog and fErr for details

        Default: 0

    gpFacility
        Log messages sent to syslog will be sent to the "facility" specified
        by by gpFacility.

        See: fLog. Also see Notes, Custom Script Logs

        Default: user

        Allowed facility names:

         local0 through local7 - local system facilities
         user - misc scripts, generic user-level messages, /var/log/user.log
         auth - security/authorization messages, /var/log/auth.log
         authpriv - security/authorization messages (private)
         cron - clock daemon (cron and at), /var/log/cron.log
         daemon - system daemons without separate facility value, /var/log/daemon.log
         ftp - ftp daemon
         kern - kernel  messages  (these  can't be generated from user processes)
         lpr - line printer subsystem
         mail - mail subsystem
         news - USENET news subsystem
         syslog - messages generated internally by syslogd(8), /var/log/syslog.log
         uucp - UUCP subsystem

        These are some suggested uses for the localN facilities:

         local0 - system or application configuration (e.g. CFEngine)
         local1 - application processes, /var/log/app-$cName.log
         local2 - web site errors
         local3 - web site access
         local4 - backend processes
         local5 - publishing/deployments
         local6 - ?
         local7 - ?

        Priority levels: emerg, alert, crit, err, warning, notice, info,
        debug, debug-N

    gpVerbose
        If set to 0, only log message at "warning" level and above will be
        output.

        If set to 1, all non-debug messages will be output.

        See -v, fLog

        Default: 0

    gpDebug
        If set to 0, all "debug" and "debug-N" level messages will be
        skipped.

        If not 0, all "debug" level messages will be output.

        Or if "debug-N" level is used, then if gpDebug is <= N, then the log
        message will be output, otherwise it is skipped.

        See -x

RETURN VALUE
    [What the program or function returns if successful.]

ERRORS
    Fatal Error:

    Warning:

    Many error messages may describe where the error is located, with the
    following log message format:

     Program: PID NNNN: Message [LINE](ErrNo)

ENVIRONMENT
    See Globals section for details.

    HOME, USER, Tmp, gpLog, gpFacility, gpVerbose, gpDebug

SEE ALSO
    shunit2.1 bash-com.inc bash-com.test

NOTES
  Custom Script Logs
    Create this file /etc/rsyslog.d/10-custom-formats.conf

      $template PriCSV,"\"%timegenerated%\",%HOSTNAME%,%pri-text%,%syslogtag%%msg%\n"
      $template PriSp,"%timegenerated% %HOSTNAME% %pri-text% %syslogtag%%msg%\n"

      $template TLocal1,"/var/log/app/%programname%.log"
      local1.*       -?TLocal1;PriSp

    You can also edit /etc/rsyslog.conf to use the PriSp or PriCSV templates
    for all the log files. Just append ";PriSp" after each of the log file
    names. These templates include the faclity and priority levels with the
    messages, so it will be easier to redefine the rsyslog config to limit
    missplaced or verbose messages.

    Restart rsyslog to use the new config.

    Now if gpLog is set to 1 and gpFacility is set to local1, log messages
    will be sent to: /var/log/app-$cName.log

    In addition see the "# Setup default logging" code below. If gpLog is 1,
    then all stdout and stderr output will be sent to $gpFacility.info.

  More Custom Logs
    Optionally, the other localN facilities can be setup to log other
    intersting services.

     local0 - configuration, /var/log/config/$cName.log
     local1 - application processes, /var/log/app/$cName.log
     local2 - web site errors, /var/log/web/$Site.error.log
     local3 - web site access, /var/log/web/$Site.access.log
     local4 - backend processes, /var/log/backend/$cName.log
     local5 - publishing/deployments, /var/log/publish/$cName.log
     local6 - ?, /var/log/syslog
     local7 - ?, /var/log/syslog


     $template TLocal0,"/var/log/config/%programname%.log"
     local0.*       -?TLocal0;PriSp
  
     $template TLocal1,"/var/log/app/%programname%.log"
     local1.*       -?TLocal1;PriSp

     $template TLocal2,"/var/log/web/%programname%.error.log"
     local2.*       -?TLocal2;PriSp

     $template TLocal3,"/var/log/app/%programname%.access.log"
     local3.*       -?TLocal3;PriSp

     $template TLocal4,"/var/log/backend/%programname%.log"
     local4.*       -?TLocal4;PriSp

     $template TLocal5,"/var/log/publish/%programname%.log"
     local5.*       -?TLocal5;PriSp

     $template TLocal6,"/var/log/syslog
     local6.*       -?TLocal6;PriSp

     $template TLocal7,"/var/log/syslog
     local7.*       -?TLocal6;PriSp

CAVEATS
    [Things to take special care with; sometimes called WARNINGS.]

DIAGNOSTICS
    To verify the script is internally OK, run: SCRIPTNAME -T all

BUGS
    [Things that are broken or just don't work quite right.]

RESTRICTIONS
    [Bugs you don't plan to fix :-)]

    NAME

HISTORY
    GPLv3 (c) Copyright 2021 by COMPANY

    $Revision: 1.20 $ $Date: 2025/01/21 19:37:52 $ GMT

