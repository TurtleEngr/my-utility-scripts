#!/bin/bash

# Usage
#     bash-link FILE.sh | more

tFile=$1
gErr=0
# if all cmds in a pipe return 0, then $?=0
set -o pipefail

echo
echo '================================'

echo 'Matching []'
cat $tFile | grep -n '\[' | grep -v '\]'
cat $tFile | grep -n '\]' | grep -v '\['
cat $tFile | grep -n '\[ ' | grep -v ' \]'
cat $tFile | grep -n ' \]' | grep -v '\[ '
cat $tFile | grep -n 'if *\[' | grep -v '\[ '
cat $tFile | grep -n 'if .*\]' | grep -v ' \]'
echo -n 'Number of []: '
tr -cd '[]' <$tFile | wc -c

echo
echo 'Matching ()'
cat $tFile | grep -n '(' | grep -v ')'
cat $tFile | grep -n ')' | grep -v '('
echo -n 'Number of (): '
tr -cd '()' <$tFile | wc -c

echo
echo 'Matching {}'
cat $tFile | grep -n '{' | grep -v '}'
cat $tFile | grep -n '}' | grep -v '{'
echo -n 'Number of {}: '
tr -cd '{}' <$tFile | wc -c

echo
echo 'Matching ""'
cat $tFile | grep -n '"' | while read; do
    c=$(echo $REPLY | tr -cd '"' | wc -c)
    let m=c%2
    if [ $m -ne 0 ]; then
        echo $REPLY
    fi
done
echo -n 'Number of ": '
tr -cd '"' <$tFile | wc -c

echo
echo "Matching ''"
cat $tFile | grep -n "'" | while read; do
    c=$(echo $REPLY | tr -cd "'" | wc -c)
    let m=c%2
    if [ $m -ne 0 ]; then
        echo $REPLY
    fi
done
echo -n "Number of ': "
tr -cd "'" <$tFile | wc -c

echo
echo '================================'
echo bash -n $tFile
bash -n $tFile
let gErr+=$?

echo
echo '================================'
echo 'podchecker'
podchecker $tFile 2>&1 | tee /tmp/bash-lint.tmp
tErr=$?
if ! grep 'does not contain any pod commands' /tmp/bash-lint.tmp; then
    let gErr+=$tErr
fi

echo
echo '================================'
tAlwaysSkip='SC1090,SC2003,SC2086,SC2088,SC2155,SC2164,SC2219,SC2230,SC2103,SC2181'
tWarning='SC2016,SC2044,SC2034,SC2154,SC2166,SC2172'

echo "shellcheck -x -e $tAlwaysSkip"
echo
shellcheck -x -e $tAlwaysSkip $tFile

cat <<EOF

Disable shellcheck codes with comments like:
# shellcheck disable=SC1090,SC2003
EOF

shellcheck -x -e $tAlwaysSkip,$tWarning $tFile >/dev/null 2>&1
let gErr+=$?

exit $gErr

# ----------
# spellcheck codes
# https://gist.github.com/nicerobot/53cee11ee0abbdc997661e65b348f375

# Document the ones that this script disables.
#         s - skip; w - warning; all others set error code
# SC1090: s Can't follow non-constant source. Use a directive to specify location. (because you used ". $var/foo")
# SC2003: s expr is antiquated. Consider rewriting this using $((..)), ${} or [[ ]].
# SC2006: s Use $(...) notation instead of legacy backticked `...`.
# SC2016: w Expressions don't expand in single quotes, use double quotes for that.
# SC2034: w VAR appears unused. Verify use (or export if used externally).
# SC2044: w For loops over find output are fragile. Use find -exec or a while read loop.
# SC2086: s Double quote to prevent globbing and word splitting.
# SC2088:  Tilde does not expand in quotes
# SC2103: s Use a ( subshell ) to avoid having to cd back.
# SC2154: w NNN is referenced but not assigned.
# SC2155: s Declare and assign separately to avoid masking return values.
# SC2164: s Use 'cd ... || exit' or 'cd ... || return' in case cd fails.
# SC2166: w Prefer [ p ] && [ q ] as [ p -a q ] is not well defined.
# SC2172: w Trapping signals by number is not well defined. Prefer signal names.
# SC2181: s Check exit code directly
# SC2219: s Instead of 'let expr', prefer (( expr )) .
# SC2230: s which is non-standard. Use builtin 'command -v' instead.
