#!/bin/bash
# $Header: /repo/per-bruce.cvs/bin/bcmnt,v 1.49 2023/03/25 22:21:41 bruce Exp $

# Prefix codes (show the "scope" of variables):
# gVar - global variable (may even be external to the script)
# pVar - parameter (script option or function parameter)
# gpVar - global parameter, i.e. may be defined external to the script
# cVar - global constant (set once)
# tVar - temporary variable (local to a function)
# fFun - function

# Commonally used global variables:
# gpDebug - toggle (-x)
# gpVerbose - toggle (-v)
# gErr - error code (0 = no error)
# cVer - current version
# cName - script's name

function fUsage() {
    if [ $# -ne 0 ]; then
        pod2text $0 | more
    else
        pod2usage $0
    fi
    exit 1

    cat <<EOF
=pod

=head1 bcmnt

=head1 SYNOPSIS

       bcmnt [-m | -u]
             [-M Dir] [-U Dir] [-C Dir]
             [-a] [-g] [-t Min] [-l]
             [-h] [-v] [-x]

=head1 DESCRIPTION

Mount encrypted drives.

=head1 OPTIONS

=over 4

=item B<-m>

Mount all ~/bc/.*.ecfs dirs.

=item B<-u>

Unmount all ~/bc/.*.ecfs dirs.

=item B<-a>

Use the same prompted password the Dirs.

=item B<-g>

Use a GUI prompt, if available.  Text prompt is the default.

=item B<-t Min>

Set the timeout period. Default is unlimited.

=item B<-M Dir>

Mount one or more Dir. I.e. multiple -M options can be used.

=item B<-U Dir>

Unount one or more Dir. I.e. multiple -U options can be used.

=item B<-C Dir>

Create an encrypted directory named Dir in ~/bc/. A corresponding
~/bc/.Dir.ecfs will be created. You'll be prompted for different
options.

All other options will be ignored and only one Dir can be specified.


=item B<-l>

List all the possible bc mounts. If -v option is used, then give
information about each mount.

All other options will be ignored.

=item B<-h>

This help.

=item B<-v>

Verbose output.  Sent to stderr.

=item B<-x>

Debug mode. Multiple -x options turns on more debug output.

=back

=head1 RETURN VALUE

 0 - OK
 !0 - Error

=head1 ERRORS

-m and -u cannot be used at the same time.

-m or -u cannot be used with -M or -U

       bcmnt [-m | -u]
             [-M Dir] [-U Dir] [-C Dir]
             [-a] [-g] [-t Min] [-l]
             [-h] [-v] [-x]

=head1 EXAMPLES

=head1 ENVIRONMENT

=head1 FILES

 ~/bc/.*.ecfs
 ~/bc/*/mounted - exists if ~/bc/.*.ecfs is mounted.

=head1 SEE ALSO

encfs, encfsctl

=head1 NOTES

=head1 CAVEATS

-l and -C options will ignore all other options.

=head1 DIAGNOSTICS

=head1 BUGS

=head1 RESTRICTIONS

=head1 AUTHOR

=head1 HISTORY

 $Revision: 1.49 $
 $Date: 2023/03/25 22:21:41 $ GMT

=cut
EOF
    exit 1
} # fUsage

# --------------------------------
function fError() {
    # Usage:
    #     fError pMsg [pLine [pErr]]
    # Print the error message.  Then call fCleanUp, and exit

    local pMsg="$1"
    local pLine=$2
    local pErr=$3

    fLog crit "$pMsg" $pLine $pErr
    fUsage
} # fError

# ------------------
function fLog() {
    # Usage:
    #     gErr=8801             # optional
    #     fLog notice "Just testing" $LINENO 8
    # pLevel - emerg alert crit err warning notice info debug

    local pLevel=$1
    local pMsg="$2"
    # optional
    local pLine=$3
    # optional
    local pErr=$4

    local tVerbose=""
    local tErr=""
    if [ -n "$pErr" ]; then
        tErr="$pErr"
    fi
    if [ $gErr -ne 0 ]; then
        tErr="$tErr,$gErr"
    fi
    if [ -n "$tErr" ]; then
        tErr="($tErr)"
    fi

    local tLine=""
    if [ -n "$pLine" ]; then
        tLine="[$pLine]"
    fi

    echo "${cName} $pLevel: $pMsg $tLine$tErr" 1>&2
} # fLog

# ------------------
function fCreateDir() {
    local pDir=$1

    if [ -d $cTop/.$pDir.ecfs ]; then
        fError "$cTop/.$pDir.ecfs already exists" $LINENO
    fi

    if [ ! -d $cTop/$pDir ]; then
        mkdir -p $cTop/$pDir
    fi
    if [ ! -d $cTop/$pDir ]; then
        fError "Could not create: $cTop/$pDir" $LINENO
    fi

    fLog info "Create $pDir" $LINENO
    encfs --standard $cTop/.$pDir.ecfs $cTop/$pDir
    date >$cTop/$pDir/mounted

    exit 0
} # fCreateDir

# ------------------
function fMount() {
    local pDir=$1

    if [ -f $cTop/$pDir/mounted ]; then
        fLog info "$pDir is already mounted" $LINENO
        return 0
    fi
    if [ ! -d $cTop/.$pDir.ecfs ]; then
        fError "Not found: $cTop/.$pDir.ecfs" $LINENO
    fi
    if [ ! -d $cTop/$pDir ]; then
        mkdir -p $cTop/$pDir
    fi
    if [ ! -d $cTop/$pDir ]; then
        fError "Could not create: $cTop/$pDir" $LINENO
    fi

    fLog info "Mount $pDir" $LINENO
    if [ $gpSamePass -eq 1 ]; then
        echo $cPass | encfs --stdinpass $gpTimeout $cTop/.$pDir.ecfs $cTop/$pDir
    else
        encfs --extpass="$cExtPass Password: " $gpTimeout $cTop/.$pDir.ecfs $cTop/$pDir
    fi
    if [ ! -f $cTop/$pDir/mounted ]; then
        fError "Could not mount: $cTop/$pDir" $LINENO
    fi
} # fMount

# ------------------
function fUnmount() {
    local pDir=$1

    if [ ! -f $cTop/$pDir/mounted ]; then
        fLog info "$pDir is already unmounted" $LINENO
        return 0
    fi
    fLog info "Unmount $pDir" $LINENO
    fusermount -u $cTop/$pDir
} # fUnmount

# ------------------
function fList() {
    cd $cTop
    fLog info "List dirs:" $LINENO
    for tDir in $('ls' -d .*.ecfs 2>/dev/null); do
        tDir=${tDir#.}
        tDir=${tDir%.ecfs}
        echo -n $cTop/$tDir
        if [ -f $tDir/mounted ]; then
            echo -e "\t mounted"
        else
            echo -e "\t not mounted"
        fi
    done

    if [ -n "$gpVerbose" ]; then
        for tDir in $cTop/.*.ecfs; do
            echo '____________________'
            fLog info "List $tDir:" $LINENO
            encfsctl $tDir
        done
    fi

    exit 0
} # fList

# ==================================================
# Main

# -------------------
# Set name of this script
# Note: this does not work if the script is executed with '.'
export cName=${0##*/}

# -------------------
# Setup log variables
export gpDebug=${gpDebug:-0}
export gpVerbose=""
export gErr=0

# -------------------
# Define the version number for this script
export cVer='$Revision: 1.49 $'
cVer=${cVer#*' '}
cVer=${cVer%' '*}

# -------------------
# Config
export cTop=$HOME/bc

# -------------------
# Get Options Section
if [ $# -eq 0 ]; then
    fError "Missing options." $LINENO
fi

export gpMountAll=0
export gpUnmountAll=0
export gpMount=""
export gpUnmount=""
export gpCreate=""
export gpSamePass=0
export gpGUIPass=0
export gpTimeout=""
export gpList=0
export gpFileList=""
while getopts :muM:U:C:agt:lhvx tArg; do
    case $tArg in
        m) gpMountAll=1 ;;
        u) gpUnmountAll=1 ;;
        M) gpMount="$gpMount $OPTARG" ;;
        U) gpUnmount="$gpUnmount $OPTARG" ;;
        C) gpCreate=$OPTARG ;;
        a) gpSamePass=1 ;;
        g) gpGUIPass=1 ;;
        t) gpTimeout="--idle=$OPTARG" ;;
        l) gpList=1 ;;

        h) fUsage long ;;
        v) gpVerbose="-v" ;;
        x) let gpDebug=gpDebug+1 ;;
        :) fError "Value required for option: $OPTARG" $LINENO ;;
        \?) fError "Unknown option: $OPTARG" $LINENO ;;
    esac
done
let tOptInd=OPTIND-1
shift $tOptInd
if [ $# -ne 0 ]; then
    gpFileList="$*"
fi

# -------------------
# Validate Options Section

if [ $(whoami) = "root" ]; then
    fError "Do not run as root user" $LINENO
fi

which encfs >/dev/null
if [ $? -ne 0 ]; then
    fError "encfs is not installed!" $LINENO
fi

if [ $gpMountAll -eq 1 -a $gpUnmountAll -eq 1 ]; then
    fError "You cannot mount and unmount all at the same time." $LINENO
fi

if [ $gpMountAll -eq 1 -o $gpUnmountAll -eq 1 ]; then
    if [ -n "$gpMount" -o -n "$gpUnmount" ]; then
        fError "-M or -U options cannot be used with -m or -u options." $LINENO
    fi
fi

export cExtPass=""
if [ -x /lib/cryptsetup/askpass ]; then
    cExtPass=/lib/cryptsetup/askpass
fi
if [ $gpGUIPass -eq 1 -a -x /usr/bin/ssh-askpass ]; then
    cExtPass=/usr/bin/ssh-askpass
fi
if [ -z "$cExtPass" ]; then
    fError "Could not find a password prompt program." $LINENO
fi

# -------------------
# Functional Section

if [ $gpList -eq 1 ]; then
    fList
    exit 0
fi

if [ -n "$gpCreate" ]; then
    fCreateDir $gpCreate
    exit 0
fi

export cPass=""
if [ -n "$gpMount" -o $gpMountAll -eq 1 ]; then
    if [ $gpSamePass -eq 1 ]; then
        cPass="$($cExtPass 'Common Password: ')"
    fi
fi

if [ -n "$gpMount" ]; then
    for tDir in $gpMount; do
        fMount $tDir
    done
fi

if [ -n "$gpUnmount" ]; then
    for tDir in $gpUnmount; do
        fUnmount $tDir
    done
fi

if [ $gpMountAll -eq 1 ]; then
    cd $cTop
    for tDir in $('ls' -d .*.ecfs 2>/dev/null); do
        tDir=${tDir#.}
        tDir=${tDir%.ecfs}
        if [ -f $tDir/mounted ]; then
            fLog info "$tDir is already mounted" $LINENO
        else
            fMount $tDir
        fi
    done
    exit 0
fi

if [ $gpUnmountAll -eq 1 ]; then
    cd $cTop
    for tDir in $('ls' */mounted 2>/dev/null); do
        fUnmount ${tDir%/mounted}
    done
    exit 0
fi

exit 0
