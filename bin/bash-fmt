#!/bin/bash

# --------------------
function fUsage() {
    cat <<\EOF | more 1>&2
Usage:
    bash-fmt <pInFile >pOutFile
        or
    bash-fmt pFile...
        or
    bash-fmt -h

Description:

    With no argument this script will work as a "git clean filter"
    Read from stdin and output to stdout. Expand tabs, remove trailing
    whitespace, and format with shfmt.  If problems, it exits with an
    error and outputs nothing, so check!

    shfmt can be found at:
    /rel/archive/software/ThirdParty/shfmt/
    https://github.com/mvdan/sh/releases/download/v3.1.2/shfmt_v3.1.2_linux_amd64

To use as a "git clean filter":

    In ~/.gitconfig add:
        [filter "bash-fmt"]
            clean = bash-fmt

    In the top repo's dir add .gitattributes
    For example:
        *.sh    filter=bash-fmt
        *.inc   filter=bash-fmt

To format all *.sh files

    bash-fmt *.sh
EOF
    exit 1
} # fUsage

# --------------------
function fProcess() {
    local pFile="$1"

    cat $pFile >$cInFile

    head -n 2 <$cInFile | grep -q '#!/bin/bash' &>/dev/null
    if [ $? -ne 0 ]; then
        head -n 2 <$cInFile | grep -q '#!/usr/bin/env bash' &>/dev/null
        if [ $? -ne 0 ]; then
            cat <$cInFile
            echo "Warning: Not a bash file [$LINENO]" 1>&2
            return 1
        fi
    fi

    bash -n <$cInFile &>/dev/null
    if [ $? -ne 0 ]; then
        echo "Error: bash script has syntax errors [$LINENO]" 1>&2
        return 1
    fi

    # expand tabs, remove trailing whitespace, and try formatting
    expand <$cInFile |
        sed -E 's/[[:space:]]*$//' |
        'shfmt' -i 4 -ci >$cOutFile 2>/dev/null
    if [ $? -ne 0 ]; then
        echo "Error: shfmt errors [$LINENO]" 1>&2
        return 1
    fi

    # Is the formatted file empty?
    if [ ! -s $cOutFile ]; then
        echo "Error: shfmt errors [$LINENO]" 1>&2
        return 1
    fi

    # All OK so output the formatted file
    if [ -n "$pFile" ]; then
        cat <$cOutFile >$pFile
    else
        cat <$cOutFile
    fi
    return 0
} # fProcess

# ========================================

pFileList=""
if [ $# -ne 0 ]; then
    if [ -f $1 ]; then
        pFileList=$*
    else
        fUsage
    fi
fi

# --------------------
if ! which shfmt &>/dev/null; then
    echo "Error: missing shfmt [$LINENO]" 1>&2
    exit 1
fi
if [ -n "$pFile" ]; then
    for i in $pFileList; do
        if [ ! -w $i ]; then
            echo "Error: Not writable: \"$i\" [$LINENO]" 1>&2
            exit 1
        fi
    done
fi

cInFile=/tmp/in-$$.tmp
cOutFile=/tmp/out-$$.tmp

if [ -n "$pFileList" ]; then
    for pFile in $pFileList; do
        fProcess $pFile
    done
else
    fProcess
fi

rm -f $cInFile $cOutFile &>/dev/null

exit 0
