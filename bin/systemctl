#!/usr/bin/env bash
set -u

export cName=systemctl
export cBin

# ========================================
# Functions

# --------------------------------
fUsage() {
    local pStyle="${1:-usage}"
    local tProg=""
    
    case $pStyle in
        short | usage)
            tProg=pod2usage
            ;;
        long | text)
            tProg=pod2text
            ;;
        html)
            tProg="pod2html --title=$cName"
            ;;
        md)
            tProg=pod2markdown
            ;;
        man)
            tProg=pod2man
            ;;
        *)
            tProg=pod2text
            ;;
    esac

    # Default to pod2text if tProg does not exist
    if ! which ${tProg%% *} >/dev/null; then
        tProg=pod2text
    fi
    
    cat <<EOF >/tmp/$cName.pod
=pod

=for text ========================================

=for html <hr/>

=head1 NAME $cName

Replace "systemctl" calls with "service" calls.

=head1 SYNOPSIS

    $cName pCmd pService [-h] [-H pStyle]

=head1 DESCRIPTION

For systems like mx linx where "systemd" is not enabled, replace
"systemctl" calls with calls to sysv "service" call.


In general:
  systemctl pCmd pService
    calls:
  service pService pCmd

=head1 OPTIONS

=over 4

=item B<-pCmd>

This option is required.  Only these commands will work: start, stop,
status, restart, reload, reset, force-reload

=item B<-pService>

See the scripts in /etc/init.d/ for the service scripts that will work
with this.

=item B<-h>

Output this "long" usage help. See "-H long"

=item B<-H pStyle>

pStyle is used to select the type of help and how it is formatted.

Styles:

    short|usage - Output short usage help as text.
    long|text   - Output long usage help as text.
    man         - Output long usage help as a man page.
    html        - Output long usage help as html.
    md          - Output long usage help as markdown.

=back

=for comment =head2 Globals
=for comment =head1 RETURN VALUE
=for comment =head1 ERRORS

=head1 EXAMPLES

  systemctl status ssh

will call:

  service ssh status

=for comment =head1 ENVIRONMENT

PATH

=for comment =head1 FILES
=for comment =head1 SEE ALSO
=head1 NOTES

Copy this to a directory that is specified in PATH, before the
directory that has systemctl. Or just replace systemctl with this
script.

Why not systemd? Because in the opinion of many, sysv init is simpler
and has a smaller security expousure than systemd. For those who don't
agree, too bad. Linux is all about freedom of choice; people can
choose the services and apps they like.

=for comment =head1 CAVEATS
=for comment =head1 DIAGNOSTICS
=for comment =head1 BUGS
=for comment =head1 RESTRICTIONS
=for comment =head1 AUTHOR

=head1 HISTORY

GPLv2 (c) Copyright

=cut
EOF
    # shellcheck disable=SC2002
    cat /tmp/$cName.pod | $tProg | more
    exit 1
} # fUsage

# ========================================
# Main

cBin=${0%/*}
if [[ "$cBin" = "." ]]; then
    cBin=$PWD
fi
cd $cBin >/dev/null 2>&1
cBin=$PWD
cd - >/dev/null 2>&1

# -------------------
# Get Args Section

while getopts :hH: tArg; do
    case $tArg in
        # Common arguments
        h)
            fUsage long
            exit 1
            ;;
        H)
            fUsage $OPTARG
            ;;
        # Problem arguments
        :) echo "Error: Value required for option: -$OPTARG"
           fUsage usage
           exit 1
        ;;
        \?) echo "Error: Unknown option: $OPTARG"
            fUsage usage
            exit 1
        ;;
    esac
done
((--OPTIND))
shift $OPTIND
if [ $# -ne 2 ]; then
    fUsage usage
fi

gpCmd="$1"
shift

gpService="$1"
shift

# --------------------
# Functional section

case $pCmd in
    start)
    stop)
    status)
    restart)
    reload)
    force-reload)
    reset)
        service $pService $pCmd
        ;;
    *) echo "Error: Unknown cmd: $pCmd (systemd is not on this server)"
       fUsage usage
       exit 1
       ;;
esac
