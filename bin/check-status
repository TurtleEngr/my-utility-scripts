#!/bin/bash
# $Header: /repo/local.cvs/per/bruce/bin/check-status,v 1.4 2021/09/29 07:10:44 bruce Exp $

# ========================================
# Unit Tests

# --------------------
testValidate()
{
	assertEquals "tv-1" "1.22.33" "$(fValidate 1.22.33)"
	assertEquals "tv-2" "1.22.33" "$(fValidate 1.foo22.33bar)"
	assertEquals "tv-3" "1.22.33" "$(fValidate \$x1.22.\$x33)"
	assertNull "tv-4" "$(fValidate foobar 1.22.33)"
	assertNull "tv-5" "$(fValidate foobar)"
	assertNull "tv-6" "$(fValidate foobar 234)"
}

# --------------------
testParseArgs()
{
	local tCmd
	local tFile
	local tIP
	local tPort

	# -----
	read -t 1 -r tCmd tIP tPort tFile < <(fParseArgs 1 8.8.8.8 53)
	assertEquals "line=$LINENO" "1 8.8.8.8 53 file" "$tCmd $tIP $tPort $tFile"

	# -----
	read -t 1 -r tCmd tIP tPort tFile < <(fParseArgs 1 foo8.8bar.8.8 bar53)
	assertEquals "line=$LINENO" "1 8.8.8.8 53 file" "$tCmd $tIP $tPort $tFile"

	# -----
	read -t 1 -r tCmd tIP tPort tFile < <(fParseArgs 1 foo 53)
	assertEquals "line=$LINENO" "1 ip 53 file" "$tCmd $tIP $tPort $tFile"

	# -----
	read -t 1 -r tCmd tIP tPort tFile < <(fParseArgs 1 "foo" "53")
	assertEquals "line=$LINENO" "1 ip 53 file" "$tCmd $tIP $tPort $tFile"

	# -----
	read -t 1 -r tCmd tIP tPort tFile < <(fParseArgs 1 8.8.8.8 foo)
	assertEquals "line=$LINENO" "1 8.8.8.8 port file" "$tCmd $tIP $tPort $tFile"

	# -----
	read -t 1 -r tCmd tIP tPort tFile < <(fParseArgs 1 foo bar)
	assertEquals "line=$LINENO" "1 ip port file" "$tCmd $tIP $tPort $tFile"

	# -----
	read -t 1 -r tCmd tIP tPort tFile < <(fParseArgs 1 8.8.8.8)
	assertEquals "line=$LINENO" "1 8.8.8.8 port file" "$tCmd $tIP $tPort $tFile"

	# -----
	read -t 1 -r tCmd tIP tPort tFile < <(fParseArgs 1)
	assertEquals "line=$LINENO" "1 ip port file" "$tCmd $tIP $tPort $tFile"

	# -----
	read -t 1 -r tCmd tIP tPort tFile < <(fParseArgs 1 foo)
	assertEquals "line=$LINENO" "1 ip port file" "$tCmd $tIP $tPort $tFile"
}

# --------------------
testParseQuery()
{
	local tCmd
	local tIP
	local tPort
	local tFile
	local tQS

	# -----
	tQS='cmd=1&ip=8.8.8.8&port=53'
	read -t 1 -r tCmd tIP tPort tFile  < <(fParseQuery "$tQS")
	assertEquals "line=$LINENO" "1 8.8.8.8 53 file" "$tCmd $tIP $tPort $tFile"

	# -----
	tQS='cmd=1&port=53&ip=8.8.8.8'
	read -t 1 -r tCmd tIP tPort tFile < <(fParseQuery "$tQS")
	assertEquals "line=$LINENO" "1 8.8.8.8 53 file" "$tCmd $tIP $tPort $tFile"

	# -----
	tQS='cmd=1&port=foo&ip=8.8.8.8'
	read -t 1 -r tCmd tIP tPort tFile < <(fParseQuery "$tQS")
	assertEquals "line=$LINENO" "1 8.8.8.8 port file" "$tCmd $tIP $tPort $tFile"

	# -----
	tQS='cmd=1&port=foo&ip=bar'
	read -t 1 -r tCmd tIP tPort tFile < <(fParseQuery "$tQS")
	assertEquals "line=$LINENO" "1 ip port file" "$tCmd $tIP $tPort $tFile"

	# -----
	tQS='cmd=1&port=foo5bar3&ip=bar8.8.$8.8'
	read -t 1 -r tCmd tIP tPort tFile < <(fParseQuery "$tQS")
	assertEquals "line=$LINENO" "1 8.8.8.8 53 file" "$tCmd $tIP $tPort $tFile"

	# -----
	tQS='cmd=1&ip=$(cat /etc/shadow)&pp=$(cat /etc/passwd)'
	read -t 1 -r tCmd tIP tPort tFile < <(fParseQuery "$tQS")
	assertEquals "line=$LINENO" "1 ip port file" "$tCmd $tIP $tPort $tFile"


	# -----
	tQS='foo=$(cat /etc/shadow)'
	read -t 1 -r tCmd tIP tPort tFile  < <(fParseQuery "$tQS")
	assertEquals "line=$LINENO" "cmd ip port file" "$tCmd $tIP $tPort $tFile"

	# -----
	tQS=''
	read -t 1 -r tCmd tIP tPort tFile  < <(fParseQuery "$tQS")
	assertEquals "line=$LINENO" "cmd ip port file" "$tCmd $tIP $tPort $tFile"

	# -----
	tQS='cmd=2&file=1'
	read -t 1 -r tCmd tIP tPort tFile  < <(fParseQuery "$tQS")
	assertEquals "line=$LINENO" "2 ip port 1" "$tCmd $tIP $tPort $tFile"
}

# --------------------
testGetStatus()
{
	local tMsg

	assertEquals "line=$LINENO" "OK" "$(fGetStatus 1 192.168.1.5 443 file)"
	assertEquals "line=$LINENO" "Fail" "$(fGetStatus 1 192.168.1.5 444 file)"
	assertEquals "line=$LINENO" "Fail" "$(fGetStatus 1 192.168.1.1 20 file)"

	assertEquals "line=$LINENO" "Fail" "$(fGetStatus cmd ip port file)"
	assertEquals "line=$LINENO" "Fail" "$(fGetStatus 9 ip port 1)"
	
	# -----
	rm $cFile1 &>/dev/null
	assertEquals "line=$LINENO" "Fail" "$(fGetStatus 2 ip port 1)"

	# -----
	tMsg='OK'
	echo "$tMsg" >$cFile1
	assertEquals "line=$LINENO" "$tMsg" "$(fGetStatus 2 ip port 1)"

	# -----
	tMsg='Error: Some mail is bouncing'
	echo "$tMsg" >$cFile1
	assertNotEquals "line=$LINENO" "OK" "$(fGetStatus 2 ip port 1)"

	# -----
	tMsg='Error: Some mail is bouncing'
	echo "$tMsg" >$cFile1
	assertEquals "line=$LINENO" "$tMsg" "$(fGetStatus 2 ip port 1)"

	# -----
	tMsg='Subject: asimov backup OK'
	echo "$tMsg" >$cFile2
	assertEquals "line=$LINENO" "$tMsg" "$(fGetStatus 2 ip port 2)"
}

# --------------------
testOutput()
{
	local tResult

	# -----
	tResult=$(fOutput 1 192.168.1.5 443 file OK)
	assertContains "line=$LINENO" "$tResult" 'Check-Status: 1 192.168.1.5 443 file'
	assertContains "line=$LINENO" "$tResult" "OK" 

	# -----
	tResult=$(fOutput 1 192.168.1.5 444 file Fail)
	assertContains "line=$LINENO" "$tResult" 'Check-Status: 1 192.168.1.5 444 file'
	assertContains "line=$LINENO" "$tResult" "Fail"

	# -----
	tResult=$(fOutput 2 ip port 1 OK)
	assertContains "line=$LINENO $tResult" "$tResult" 'Check-Status: 2 ip port 1'
	assertContains "line=$LINENO" "$tResult" "OK" 
}

# --------------------
testIntegrate1()
{
	local tIP=""
	local tPort=""
	local tPile=""
	local tResult=""
	local tTestResult=""
	local tQS=""

	# -----
	tQS='cmd=1&ip=192.168.1.5&port=22'
	read -t 1 -r tCmd tIP tPort tFile < <(fParseQuery "$tQS")
	tResult=$(fGetStatus $tCmd $tIP $tPort $tFile)
	tTestResult=$(fOutput $tCmd $tIP $tPort $tFile $tResult)
	assertContains "line=$LINENO $tTestResult" 'Check-Status: 1 192.168.1.5 22 file'
	assertContains "line=$LINENO" "$tTestResult" "OK"

	# -----
	tMsg='OK'
	echo "$tMsg" >$cFile1
	tQS='cmd=2&file=1'
	read -t 1 -r tCmd tIP tPort tFile < <(fParseQuery "$tQS")
	tResult=$(fGetStatus $tCmd $tIP $tPort $tFile)
	tTestResult=$(fOutput $tCmd $tIP $tPort $tFile $tResult)
	assertContains "line=$LINENO $tTestResult" 'Check-Status: 2 ip port 1'
	assertContains "line=$LINENO" "$tTestResult" "OK"
	
	# -----
	tMsg='Error: Some mail is bouncing'
	echo "$tMsg" >$cFile1
	tQS='cmd=2&file=1'
	read -t 1 -r tCmd tIP tPort tFile < <(fParseQuery "$tQS")
	tResult=$(fGetStatus $tCmd $tIP $tPort $tFile)
	tTestResult=$(fOutput $tCmd $tIP $tPort $tFile "$tResult")
	assertContains "line=$LINENO $tTestResult" 'Check-Status: 2 ip port 1'
	assertContains "line=$LINENO $tTestResult" "$tTestResult" "$tMsg"
	
	# -----
	tMsg='Subject: asimov backup OK'
	echo "$tMsg" >$cFile2
	tQS='cmd=2&file=2'
	read -t 1 -r tCmd tIP tPort tFile < <(fParseQuery "$tQS")
	tResult=$(fGetStatus $tCmd $tIP $tPort $tFile)
	tTestResult=$(fOutput $tCmd $tIP $tPort $tFile "$tResult")
	assertContains "line=$LINENO $tTestResult" 'Check-Status: 2 ip port 2'
	assertContains "line=$LINENO $tTestResult" "$tTestResult" "OK"

	# -----
	tMsg='Subject: asimov backup Error'
	echo "$tMsg" >$cFile2
	tQS='cmd=2&file=2'
	read -t 1 -r tCmd tIP tPort tFile < <(fParseQuery "$tQS")
	tResult=$(fGetStatus $tCmd $tIP $tPort $tFile)
	tTestResult=$(fOutput $tCmd $tIP $tPort $tFile "$tResult")
	assertContains "line=$LINENO $tTestResult" 'Check-Status: 2 ip port 2'
	assertContains "line=$LINENO $tTestResult" "$tTestResult" "$tMsg"
}

# --------------------
testIntegrate2()
{
	local tMsg
	local tResult
	export QUERY_STRING=""

	# -----
	tResult=$(./check-status 1 192.168.1.5 80 foo)
	assertContains "line=$LINENO $tResult" 'Check-Status: 1 192.168.1.5 80 file'
	assertContains "line=$LINENO $tResult" "$tResult" "OK"

	# -----
	tResult=$(./check-status 1 192.168.1.5 444 foo)
	assertContains "line=$LINENO $tResult" 'Check-Status: 1 192.168.1.5 444 file'
	assertContains "line=$LINENO" "$tResult" "Fail"

	# -----
	tMsg='OK'
	echo "$tMsg" >$cFile1
	tResult=$(./check-status 2 foo bar 1)
	assertContains "line=$LINENO $tResult" 'Check-Status: 2 ip port 1'
	assertContains "line=$LINENO" "$tResult" "OK"

	# -----
	tMsg='Error: Some mail is bouncing'
	echo "$tMsg" >$cFile1
	tResult=$(./check-status 2 foo bar 1)
	assertContains "line=$LINENO $tResult" 'Check-Status: 2 ip port 1'
	assertContains "line=$LINENO $tResult" "$tResult" "$tMsg"

	# -----
	tMsg='Subject: asimov backup OK'
	echo "$tMsg" >$cFile2
	tResult=$(./check-status 2 foo bar 2)
	assertContains "line=$LINENO $tResult" 'Check-Status: 2 ip port 2'
	assertContains "line=$LINENO $tResult" "$tResult" "$tMsg"

	# -----
	tMsg='Subject: asimov backup Error'
	echo "$tMsg" >$cFile2
	tResult=$(./check-status 2 foo bar 2)
	assertContains "line=$LINENO $tResult" 'Check-Status: 2 ip port 2'
	assertContains "line=$LINENO $tResult" "$tResult" "$tMsg"

	# -----
	QUERY_STRING='cmd=1&ip=192.168.1.5&port=80'
	tResult=$(./check-status)
	assertContains "line=$LINENO $tResult" "$tResult" 'Check-Status: 1 192.168.1.5 80 file'
	assertContains "line=$LINENO $tResult" "$tResult" "OK"

	# -----
	QUERY_STRING='cmd=1&ip=192.168.1.5&port=444'
	tResult=$(./check-status)
	assertContains "line=$LINENO $tResult" "$tResult" 'Check-Status: 1 192.168.1.5 444 file'
	assertContains "line=$LINENO" "$tResult" "Fail"

	# -----
	QUERY_STRING='cmd=2&file=1'
	tMsg='OK'
	echo "$tMsg" >$cFile1
	tResult=$(./check-status)
	assertContains "line=$LINENO $tResult" "$tResult" 'Check-Status: 2 ip port 1'
	assertContains "line=$LINENO" "$tResult" "OK"

	# -----
	QUERY_STRING='cmd=2&file=1'
	tMsg='Error: Some mail is bouncing'
	echo "$tMsg" >$cFile1
	tResult=$(./check-status)
	assertContains "line=$LINENO $tResult" "$tResult" 'Check-Status: 2 ip port 1'
	assertContains "line=$LINENO $tResult" "$tResult" "$tMsg"

	# -----
	QUERY_STRING='cmd=2&file=2'
	tMsg='Subject: asimov backup OK'
	echo "$tMsg" >$cFile2
	tResult=$(./check-status)
	assertContains "line=$LINENO $tResult" "$tResult" 'Check-Status: 2 ip port 2'
	assertContains "line=$LINENO $tResult" "$tResult" "$tMsg"

	# -----
	QUERY_STRING='cmd=2&file=2'
	tMsg='Subject: asimov backup Error'
	echo "$tMsg" >$cFile2
	tResult=$(./check-status)
	assertContains "line=$LINENO $tResult" "$tResult" 'Check-Status: 2 ip port 2'
	assertContains "line=$LINENO $tResult" "$tResult" "$tMsg"

	# -----
	QUERY_STRING=''
	tMsg='Subject: asimov backup Error'
	echo "$tMsg" >$cFile2
	tResult=$(./check-status)
	assertContains "line=$LINENO $tResult" "$tResult" 'Error: problem parsing args, missing QUERY_STRING'
	assertNotContains "line=$LINENO $tResult" "$tResult" "$tMsg"

	# -----
	QUERY_STRING='cmd=2&file=2'
	tMsg='Subject: asimov backup Error'
	echo "$tMsg" >$cFile2
	tResult=$(./check-status)
	assertContains "line=$LINENO $tResult" "$tResult" '2 ip port 2'
	assertContains "line=$LINENO $tResult" "$tResult" "$tMsg"

	# -----
	QUERY_STRING='cmd=2&file=2'
	tMsg='Subject: asimov backup Error'
	echo "$tMsg" >$cFile2
	tResult=$(./check-status)
	assertContains "line=$LINENO $tResult" "$tResult" 'Check-Status: 2 ip port 2'
	assertContains "line=$LINENO $tResult" "$tResult" "$tMsg"
}

# ========================================
# Functions

# --------------------
fUsage()
{    
	cat <<EOF
This Help
	check-status -h

Unit Test
	check-status -t
	check-status -t -- testName [testName...]

cgi-bin Usage
	export QUERY_STRING='cmd=[12]&ip=[N.N.N.N]&port=[NNN]&file=[N]'
	check-status

	https://moria.whyayh.com/cgi-bin/checkstatus?cmd=1&ip=N.N.N.N&port=N
	https://moria.whyayh.com/cgi-bin/checkstatus?cmd=2&file=N

	Example cgi-bin
	https://moria.whyayh.com/cgi-bin/checkstatus?cmd=1ip=192.168.1.7&port=22
	https://moria.whyayh.com/cgi-bin/checkstatus?cmd=1ip=192.168.1.96&port=2049

CLI Usage for ip/port check:
	check-status 1 ip port

CLI Usage for file check:
	check-status 2 N

	N=1, return: head -n 1 /var/tmp/check-mail.tmp
	N=2, return: grep "Subject: " /var/tmp/rsnapshot-monitor.tmp | head -n 1

Output 1 "ip":
	If IP PORT connected, output "OK"
	if not connected or timed out: "Fail"
	
Output 2 "file":
       if invalid FILE, output "Invalid file"
       if FILE, output "head -n 1 FILE"
EOF
	exit 1
}

# --------------------
fValidInput()
{
	local pCmd=$1
	local pIP=$2
	local pPort=$3
	local pFile=$4
	local tCount=0
	local tErr=0
	local tResult=""
	
	tCount=$(echo "pCmd pIP pPort pFile" | wc -w)
	tCount=$tCount
	if [ "$tCount" != "4" ]; then
		tErr=2
		gResult="Error: problem parsing args, internal error ($tErr)"
	fi
	if [ "$pCmd" = "1" ] && ( [ "$pIP" = "ip" ] || [ "$pPort" = "port" ] ); then
		tErr=3
		gResult="Error: problem parsing args ($tErr)"
	fi
	if [ "$pCmd" = "2" ] && [ "$pFile" = "file" ]; then
		tErr=4
		gResult="Error: problem parsing args ($tErr)"
	fi

	if [ $tErr -ne 0 ]; then
		fOutput $pCmd "$pIP" "$pPort" "$pFile" "$gResult"
		exit $tErr
	fi
}

# --------------------
fValidate()
{
	# Clean the inputs. Only digits are allowed.
	echo "$1" | tr -cd '.[:digit:]'
}

# --------------------
fParseArgs()
{
	local pCmd="$1"
	local pIP="$2"
	local pPort="$3"
	local pFile="$4"

	pCmd=$(fValidate "$pCmd")
	pIP=$(fValidate "$pIP")
	pPort=$(fValidate "$pPort")
	pFile=$(fValidate "$pFile")
	echo "${pCmd:-cmd}" "${pIP:-ip}" "${pPort:-port}" "${pFile:-file}"
}

# --------------------
fParseQuery()
{
	# Use a secure method to parse QUERY_STRING
	# https://stackoverflow.com/questions/3919755/how-to-parse-query-string-from-a-bash-cgi-script
	# Example: QUERY_STRING='ip=8.8.8.8&port=53'
	
	local pQS="$1"

	local tQS
	local tNameVal
	local tName
	local tVal
	local tCmd=""
	local tIP=""
	local tPort=""
	local tFile=""

	# Remove disallowed characters
	tQS=$(echo "$pQS" | tr -cd '[:alnum:].&=')

	while [ "$tQS" != "" ]; do
		tNameVal="${tQS%%&*}"
		tQS="${tQS#$tNameVal}"
		tQS="${tQS#&}"
		tName="${tNameVal%%=*}"
		tVal="${tNameVal#$name}"
		tVal="${tNameVal#=}"
		if [ "$tName" = "cmd" ]; then
			tCmd=$tVal
		fi
		if [ "$tName" = "ip" ]; then
			tIP=$tVal
		fi
		if [ "$tName" = "port" ]; then
			tPort=$tVal
		fi
		if [ "$tName" = "file" ]; then
			tFile=$tVal
		fi
	done
	fParseArgs "${tCmd:-cmd}" "${tIP:-ip}" "${tPort:-port}" "${tFile:-file}"
}

# --------------------
fGetStatus()
{
	local pCmd="$1"
	local pIP="$2"
	local pPort="$3"
	local pFile="$4"

	local tResult="Fail"

	case $pCmd in
		1)	timeout 5s nc -zvw10 $pIP $pPort &>/dev/null
			if [ $? -eq 0 ]; then
				tResult="OK"
			fi
		;;
		2)	case $pFile in
				1)	if [ -r $cFile1 ]; then
						tResult=$(head -n 1 $cFile1)
					fi
				;;
				2)	if [ -r $cFile2 ]; then
						tResult=$(grep 'Subject: ' $cFile2 | head -n 1)
					fi
				;;
			esac
		;;
	esac
	echo $tResult
}

# --------------------
fOutput()
{
	local pCmd="$1"
	local pIP="$2"
	local pPort="$3"
	local pFile="$4"
	local pResult="$5"

	cat <<EOF
Content-type: text/html

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>check-status</title>
</head>
<body>
<pre>
Check-Status: $pCmd $pIP $pPort $pFile
$pResult
</pre>
</body>
</html>
EOF
}

# ========================================
# Main
export QUERY_STRING
export pCmd=""
export pIP=""
export pPort=""
export pFile=""
export cFile1=/var/tmp/check-mail.tmp
export cFile2=/var/tmp/rsnapshot-monitor.tmp
export tResult=""

if [ ".$1" = ".-h" ]; then
	fUsage
fi

if [ ".$1" = ".-t" ]; then
	shift
	.  /usr/local/bin/shunit2.1
	exit $?
fi

if [ $# -eq 0 ] && [ -z "$QUERY_STRING" ]; then
	gErr=1
	tResult="Error: problem parsing args, missing QUERY_STRING ($gErr)"
	fOutput "cmd" "ip" "port" "file" "$tResult"
	exit $gErr
fi

if [ $# -ne 0 ]; then
	# CLI
	read -t 1 -r pCmd pIP pPort pFile < <(fParseArgs $*)
else
	# Web
	read -t 1 -r pCmd pIP pPort pFile < <(fParseQuery "$QUERY_STRING")
fi

fValidInput $pCmd $pIP $pPort $pFile
tResult=$(fGetStatus $pCmd $pIP $pPort $pFile)
fOutput $pCmd "$pIP" "$pPort" "$pFile" "$tResult"
exit 0
