#!/bin/bash
# $Header: /repo/local.cvs/per/bruce/bin/vid-cp2rel,v 1.2 2021/10/26 19:26:12 bruce Exp $

# Prefix codes (show the "scope" of variables):
# gVar - global variable (may even be external to the script)
# pVar - parameter (script option or function parameter)
# gpVar - global parameter, i.e. may be defined external to the script
# cVar - global constant (set once)
# tVar - temporary variable (local to a function)
# fFun - function

# Commonally used global variables:
# gpDebug - toggle (-x)
# gpVerbose - toggle (-v)
# gErr - error code (0 = no error)
# cVer - current version
# cName - script's name
# cBin - directory where the script is executing from
# cCurDir - current directory

# --------------------------------
function fUsage()
{
    if [ $# -ne 0 ]; then
        pod2text $0
    else
        pod2usage $0
    fi
    gErr=1
    exit 1
    cat <<EOF >/dev/null
=pod

=head1 NAME

vid-cp2rel - DESCRIPTION

=head1 SYNOPSIS

 	vid-cp2rel -d RelDir [-u] FileList
 		   [-h] [-l] [-v] [-x]

=head1 DESCRIPTION

Copy each FileName in FileList to the specified RelDir directory.
Only versioned files can be copied with the is script to a
RelDir. "cvs commit" will be run, to be sure the file has been saved.

The destination file name will be set to: ProjectName_Date_Ver_FileName

 ProjectName - /home/video/[ProjectName]
 Date - date for the HEAD version
 Ver - HEAD version

=head1 OPTIONS

=over 4

=item B<-d RelDir>

Destination RelDir:

 arc|archive - RelDir=/rel/archive/video/own/[YYYY-MM-DD]/

 dev|develop|development - RelDir=/rel/development/video/[ProjectName]/

 rel|release|released - RelDir=/rel/released/video/[ProjectName]/

=item B<-u>

Run "getrel -ulL" in the destination dir (RelDir) to upload any new or
modified files.

=item B<-h>

This help.

=item B<-l>

Send log messages to syslog.

=item B<-v>

Verbose output.  Sent to stderr.

=item B<-x>

Debug mode.  Do nothing? Don't log to syslog. Multiple x options turns
on more debug output.

=back

=head1 RETURN VALUE

0 - if OK

!0 - if error

=head1 ERRORS

Many error messages may describe where the error is located, with the
following log message format:

 Program: PID NNNN: Message [LINE](ErrNo)

 Missing options.
 Value required for option: OPT
 Unknown option: OPT
 Missing files
 Invalid -d option: RelDir
 You are not in a /home/video project dir
 You are not in a CVS working dir
 /mnt/usb-video is not mounted
 cvs commit error with File

=head1 EXAMPLES

You are cd'd in /home/video/skit/src/final and it has files:

 Name	     	HEAD	Date
 raw-4up.mp4	1.2	2018-12-24
 raw-scene2.mp4	1.3	2018-12-26
 editor-1.mp4	1.1	2019-01-10
 editor-2.mp4	1.1	2019-01-15
 editor-3.mp4	1.8	2019-02-01
 final-1.mp4	1.1	2019-03-18
 final-3.mp4	1.5	2019-04-16
 trailer-1.mp4	1.2	2019-03-19
 trailer-2.mp4	1.4	2019-04-17

 vid-cp2rel -d archive raw*

 	/rel/archive/video/own/2018-12-24/skit_2018-12-24_1.2_raw-4up.mp4
 	/rel/archive/video/own/2018-12-26/skit_2018-12-26_1.3_raw-scene2.mp4

 vid-cp2rel -d dev editor*

 	/rel/development/skit/skit_2019-01-10_1.1_editor-1.mp4
 	/rel/development/skit/skit_2019-01-15_1.1_editor-2.mp4

 vid-cp2rel -d release final-3* trailer*

 	/rel/released/skit/skit_2019-04-16_1.5_final-3.mp4
 	/rel/released/skit/skit_2019-03-19_1.2_trailer-1.mp4
 	/rel/released/skit/skit_2019-04-17_1.4_trailer-2.mp4

=head1 ENVIRONMENT

=head1 FILES

=head1 SEE ALSO

=head1 NOTES

=head1 CAVEATS

=head1 DIAGNOSTICS

=head1 BUGS

=head1 RESTRICTIONS

=head1 AUTHOR

=head1 HISTORY

$Revision: 1.2 $ $Date: 2021/10/26 19:26:12 $ GMT 

=cut
EOF
    exit 1
} # fUsage

# --------------------------------
function fError()
{
    # Usage:
    #     fError pMsg [pLine [pErr]]
    # Print the error message.  Then call fCleanUp, and exit

    local pMsg="$1"
    local pLine=$2
    local pErr=$3

    fLog crit "$pMsg" $pLine $pErr
    fUsage
} # fError

# ------------------
function fLog()
{
    # Usage:
    #     gErr=8801		# optional
    #     fLog notice "Just testing" $LINENO 8
    # pLevel - emerg alert crit err warning notice info debug

    local pLevel=$1
    local pMsg="$2"
    # optional
    local pLine=$3
    # optional
    local pErr=$4

    local tVerbose=""
    local tErr=""
    if [ -n "$pErr" ]; then
        tErr="$pErr"
    fi
    if [ $gErr -ne 0 ]; then
        tErr="$tErr,$gErr"
    fi
    if [ -n "$tErr" ]; then
        tErr="($tErr)"
    fi

    local tLine=""
    if [ -n "$pLine" ]; then
        tLine="[$pLine]"
    fi

    if [ $gpLog -eq 0 ]; then
        echo "${cName}[$$] $pLevel: $pMsg $tLine$tErr" 1>&2
    else
        if [ -n "$gpVerbose" ]; then
            tVerbose="-s"
        fi
        logger $tVerbose -i -t $cName -p local1.$pLevel "$pLevel: $pMsg $tLine$tErr"
    fi
} # fLog

# =========================================
# Main
export cBin cCurdir gErr gpDebug cName cVer gpVerbose PWD

# -------------------
# Set current directory location in PWD and cCurDir, because with cron
# jobs PWD is not set.
if [ -z "$PWD" ]; then
    PWD=$(pwd)
fi
cCurDir=$PWD

# -------------------
# Set name of this script
# Note: this does not work if the script is executed with '.'
cName=${0##*/}

# -------------------
# Setup log variables
gpDebug=${gpDebug:-0}
gpVerbose=""
gpLog=0
gErr=0

# -------------------
# Define the version number for this script
cVer='$Revision: 1.2 $'
cVer=${cVer#*' '}
cVer=${cVer%' '*}

# -------------------
# Configuration

# -------------------
# Get Options Section
if [ $# -eq 0 ]; then
    fError "Missing options." $LINENO
fi
gpFileList=""
gpRelDir=""
gpRunGetRel=0
while getopts :d:uhlxv tArg; do
    case $tArg in
        d) gpRelDir=$OPTARG ;;
        u) gpRunGetRel=1 ;;

        h) fUsage long ;;
        l) gpLog=1 ;;
        v) gpVerbose="-v" ;;
        x) let gpDebug=gpDebug+1 ;;
        :) fError "Value required for option: $OPTARG" $LINENO ;;
        \?) fError "Unknown option: $OPTARG" $LINENO ;;
    esac
done
let tOptInd=OPTIND-1
shift $tOptInd
if [ $# -ne 0 ]; then
    gpFileList="$*"
fi

# -------------------
# Validate Options Section

if [ -z "$gpFileList" ]; then
    fError "Missing files" $LINENO
fi

tArchive=0
case $gpRelDir in
    arc | archive)
        tArchive=1
        tRelDir=/rel/archive/video/own/[YYYY-MM-DD]
        ;;
    dev | develop | development)
        tRelDir=/rel/development/video/[ProjectName]
        ;;
    rel | release | released)
        tRelDir=/rel/released/video/[ProjectName]
        ;;
    *) fError "Invalid -d option: $gpRelDir" $LINENO ;;
esac

export tProjectName=${PWD#/home/video/}
if [ "$tProjectName" = "$PWD" ]; then
    fError "You are not in a /home/video project dir" $LINENO
fi
export tProjectName=${tProjectName%%/*}

if [ ! -d CVS ]; then
    fError "You are not in a CVS working dir" $LINENO
fi

if [ ! -d /mnt/usb-video/repo/video ]; then
    fError "/mnt/usb-video is not mounted" $LINENO
fi

# -------------------
# Functional Section

tDestDir=$tRelDir
for tFile in $gpFileList; do
    echo "Copying $tFile"
    tFileVer=$(cvs log $tFile | grep head | sed 's/head: //')
    tFileDate=$(cvs log -r$tFileVer $tFile | grep date: | awk '{print $2}')
    tDestFile=$tProjectName_$tFileDate_$tFileVer_$tFileName
    if [ $tArchive -eq 1 ]; then
        tDestDir=$tRelDir/$tFileDate
        mkdir -p $tDestDir 2>/dev/null
    fi

    cvs add $tFile 2>/dev/null
    if ! cvs commit -m "Copy to $tDistDir" $tFile; then
        fError "cvs commit error with $tFile" $LINENO
    fi

    rsync -aP $tFile $tDistDir/$tDestFile
    cat <<EOF | tee -a README.html >>$tDistDir/README.html

$(date)
Source: $PWD/$tFile
Dist:   $tDistDir/$tDestFile
EOF
done

if [ $gpRunGetRel -eq 1 ]; then
    cd $tRelDir
    if [ $tArchive -eq 1 ]; then
        getrel -uLl
    else
        getrel -uL
    fi
fi

echo "See: README.html file for the list of copied files."
