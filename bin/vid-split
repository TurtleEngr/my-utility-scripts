#!/bin/bash
# $Header: /repo/local.cvs/per/bruce/bin/vid-split,v 1.10 2023/01/06 18:05:16 bruce Exp $

# Prefix codes (show the "scope" of variables):
# gVar - global variable (may even be external to the script)
# pVar - parameter (script option or function parameter)
# gpVar - global parameter, i.e. may be defined external to the script
# cVar - global constant (set once)
# tVar - temporary variable (local to a function)
# fFun - function

# Commonally used global variables:
# gpDebug - each -x adds to gpDebug
# gpVerbose - toggle (-v)
# Tmp - personal tmp directory.  Usually set to: /tmp/$USER
# cTmpF - tmp file prefix.  Includes $gpTmp and $$ to make it unique
# gErr - error code (0 = no error)
# cVer - current version
# cName - script's name
# cBin - directory where the script is executing from
# cCurDir - current directory

# --------------------------------
function fUsage()
{
    if [ $# -ne 0 ]; then
        pod2text $0 | more
    else
        pod2usage $0
    fi
    gErr=1
    exit 1
    cat <<EOF >/dev/null
=pod

=head1 NAME

vid-split - Split a video file into multiple files. (Can also join files.)

=head1 SYNOPSIS

    vid-split [-d | -j | -m Min | -s Size] [-h] [-x] File.mp4

=head1 DESCRIPTION

Split File.mp4 into multiple files that are no more than -m minutes in
length. Only files that end with 'mp4' (or MP4) are supported for the -m option.

Or split File.mp4 into multiple files that are no more than -s
megabytes in size. Any file video file format can be used with this
option.

=head1 OPTIONS

=over 4

=item B<-d>

Just list the duration and size of File.mp4.

=item B<-m Min>

Define the maximum number of minutes for each split file. Range limit:
10 to 60. If < file duration, then nothing is done. This option will
generate separate mp4 files that are standalone.

Output file pattern for -m 20

    Base-000.mp4
    Base-020.mp4
    Base-040.mp4
    ...

=item B<-s Size>

Define the maximum size in MegaBytes for each split file. Range limit:
10 to 1900.  The files will not be valid video (or audio) files; they
will need to be concatinated together in the order they were split.

Output file pattern for -s 200

    Base.mp4-000
    Base.mp4-001
    Base.mp4-002
    ...

=item B<-j>

The File.mp4 will be created from the files that correspond to the -m
or -s options.

If the File.mp4 exists it will be renamed to File.mp4.sav. If File.mp4.sav
exists, the script will do nothing and exit.

=item B<-h>

This help.

=item B<-x>

Debug mode.  Do nothing. Just list the ffmpeg commands that will be run.

=back

=head1 RETURN VALUE

[What the program or function returns if successful.]

=head1 ERRORS

Missing options.

Value required for option: [OPT]

Unknown option: [OPT]

Missing file name

Only one file name is allowed.

Could not find: ffmpeg"

Could not find: split"

Must include one of -d, -j, -m, or -s option.

[FILE] file is not found or is not readable

[FILE] exists. Remove or rename it.

Number must be between [Min] and [Max]

Invalid extension for file: [FILE]

Could not found any matching files to join.

Cannot figure out which files to join. There are -s and -m
patterns. Remove one set.

=head1 EXAMPLES

=head2 -d example

Size of file.

    vid-split -d cam1-short.mp4
    vid-split -d cam2-short.mp4

Output:

    cam1-short.mp4 Duration: 00:54:48.42 Size: 2714Mb
    cam2-short.mp4 Duration: 00:22:18.04 Size: 904Mb

=head2 -m example

Split file into 15 minute files:

    vid-split -m 15 cam1-short.mp4
    vid-split -m 15 cam2-short.mp4

Output:

    cam1-short-000.mp4 Duraton: 00:15:00.00
    cam1-short-015.mp4 Duraton: 00:15:00.00
    cam1-short-030.mp4 Duraton: 00:15:00.00
    cam1-short-040.mp4 Duraton: 00:09:48.42

    cam2-short-000.mp4 Duraton: 00:15:00.00
    cam2-short-015.mp4 Duraton: 00:07:18.04

=head2 -s example

Split files into 500Mb files.

    vid-split -s 500 cam1-short.mp4
    vid-split -s 500 cam2-short.mp4

Output:

    cam1-short.mp4-000 Size: 500Mb
    cam1-short.mp4-001 Size: 500Mb
    cam1-short.mp4-002 Size: 500Mb
    cam1-short.mp4-003 Size: 500Mb
    cam1-short.mp4-004 Size: 500Mb
    cam1-short.mp4-005 Size: 214Mb

    cam2-short.mp4-000 Size: 500Mb
    cam2-short.mp4-002 Size: 404Mb

=head1 ENVIRONMENT

=head1 FILES

=head1 SEE ALSO

ffmpeg, split

=head1 NOTES

If a video file is over 2GB in size, cvs will not be able to version
it across the network. So this script will use ffmeg to split the
video file into separate files.  If the resulting files are still over
2GB, then use a smaller -m value (or use the -s option).

Sources for ffmpeg split and join mp4 files:
https://superuser.com/questions/140899/ffmpeg-splitting-mp4-with-same-quality
https://trac.ffmpeg.org/wiki/Concatenate

Another solution is to use "split"

    split -a 3 -d -b 1500M File.mp4 File.mp4-

or

    vid-split -s 1500 File.mp4

But before you can use the split files they will need to joined with:

    cat File.mp4-* >File.mp4

or

    vid-split -j File.mp4

=head1 CAVEATS

=head1 DIAGNOSTICS

Use -x to see the ffmpeg or split commands that would be executed,
with no -x option.

=head1 BUGS

=head1 RESTRICTIONS

=head1 AUTHOR

=head1 HISTORY

$Revision: 1.10 $

=cut
EOF
    exit 1
} # fUsage

# --------------------------------
function fError()
{
    # Usage:
    #     fError pMsg [pLine [pErr]]
    # Print the error message.  Then exit

    local pMsg="$1"
    local pLine=$2
    local pErr=$3

    fLog crit "$pMsg" "$pLine" "$pErr"
    fUsage
} # fError

# ------------------
function fLog()
{
    # Usage:
    #     gErr=8801             # optional
    #     fLog notice "Just testing" $LINENO 8
    # pLevel - emerg alert crit err warning notice info debug

    local pLevel=$1
    local pMsg="$2"
    # optional
    local pLine=$3
    # optional
    local pErr=$4

    if [ "$pLevel" = "debug" -a "$gpDebug" -eq 0 ]; then
        return
    fi

    local tVerbose=""
    local tErr=""
    if [ -n "$pErr" ]; then
        tErr="$pErr"
    fi
    if [ "$gErr" -ne 0 ]; then
        tErr="$tErr,$gErr"
    fi
    if [ -n "$tErr" ]; then
        tErr="($tErr)"
    fi

    local tLine=""
    if [ -n "$pLine" ]; then
        tLine="[$pLine]"
    fi

    if [ "$gpLog" -eq 0 ]; then
        echo "${cName}[$$] $pLevel: $pMsg $tLine$tErr" 1>&2
    else
        if [ -n "$gpVerbose" ]; then
            tVerbose="-s"
        fi
        logger $tVerbose -i -t "$cName" -p "local1.$pLevel" "$pLevel: $pMsg $tLine$tErr"
    fi
} # fLog

# ------------------
function fFileExists()
{
    local pFile=$1
    if [ ! -r "$pFile" ]; then
        fError "$pFile file is not found or is not readable" $LINENO
    fi
}

# ------------------
function fFileNotExists()
{
    local pFile=$1
    if [ -f "$pFile" ]; then
        fError "$pFile exists. Remove or rename it." $LINENO
    fi
}

# ------------------
function fFmtTime()
{
    local pMin=$1

    local tHour=0
    while [ "$pMin" -ge 60 ]; do
        let tHour+=1
        let pMin-=60
    done
    local tHourFmt=$(printf "%02d" $tHour)
    local tMinFmt=$(printf "%02d" $tMin)
    echo "$tHourFmt:$tMinFmt"
} # fFmtTime

# ------------------
function fRange()
{
    local pNum=$1
    local pMin=$2
    local pMax=$3
    if [ "$pNum" -lt "$pMin" -o "$pNum" -gt "$pMax" ]; then
        fError "Number must be between $pMin and $pMax" $LINENO
    fi
} # fRange

# ------------------
function fCmd()
{
    local pCmd="$*"

    fLog debug "$pCmd" $LINENO
    if [ "$gpDebug" -eq 0 ]; then
        $pCmd
    fi
} # fCmd

# ------------------
function fDuration()
{
    local pFile=$1
    fFileExists "$pFile"

    echo -n "$gpFile; "
    ffmpeg -i "$gpFile" 2>&1 | grep Duration | tr ',' ';' | awk '{printf("%s %s", $1, $2)}'
    local tSize="Size: $(du -sm $pFile | awk '{print $1 "MB"}')"
    echo " $tSize"
} # fDuration

# ------------------
function fSplit()
{
    local pFile=$1
    local pSize=$2
    fRange "$pSize" 10 1900
    fFileExists "$pFile"

    fCmd "split -a 3 -b ${pSize}M -d $pFile ${pFile}-"
    if [ "$gpDebug" -eq 0 ]; then
        du -sm ${pFile}-[0-9][0-9][0-9]
    fi
} # fSplit

# ------------------
function fMin()
{
    local pFile=$1
    local pMin=$2
    fRange "$pMin" 10 60
    fFileExists "$pFile"
    local tBase=${pFile%.*}
    local tExt=${pFile##*.}
    if [ "$tExt" != 'mp4' -a "$tExt" != 'MP4' ]; then
        fError "Invalid extension for file: $pFile" $LINENO
    fi

    local tLength="00:$(printf "%02d" $pMin):00"
    fLog debug "gpMin=$gpMin"
    fLog debug "pMin=$pMin"
    fLog debug "tLength=$tLength"
    local tMin=0
    local tDuration=$(ffmpeg -i $pFile 2>&1 | grep Duration |
        awk '{print $2}' | awk -F: '{print $1*60 + $2}')
    echo
    fDuration "$pFile"
    while [ "$tMin" -lt "$tDuration" ]; do
        local tStartFmt=$(fFmtTime $tMin)
        local tMinFmt=$(printf "%03d" $tMin)
        local tOutFile=$tBase-$tMinFmt.$tExt
        fCmd "ffmpeg -ss $tStartFmt:00 -t $tLength -i $pFile -acodec copy -vcodec copy $tOutFile"
        let tMin+=$pMin
    done

    if [ "$gpDebug" -eq 0 ]; then
        for i in ${tBase}-[0-9][0-9][0-9].$tExt; do
            fDuration "$i"
        done
    fi
} # fMin

# ------------------
function fJoin()
{
    local pFile=$1
    fFileNotExists "$pFile.sav"
    local tBase=${pFile%.*}
    local tExt=${pFile##*.}

    fCmd "ln $pFile $pFile.sav"
    echo "Saved $pFile to $pFile.sav"

    local tSplit=0
    if ls "${pFile}-[0-9][0-9][0-9]" &>/dev/null; then
        tSplit=1
    fi

    local tMin=0
    if ls "${tBase}-[0-9][0-9][0-9].$tExt" &>/dev/null; then
        tMin=1
    fi

    if [ "$tSplit" -eq 0 -a "$tMin" -eq 0 ]; then
        fError "Could not found any matching files to join." $LINENO
    fi
    if [ "$tSplit" -eq 1 -a "$tMin" -eq 1 ]; then
        fError "Cannot figure out which files to join. There are -s and -m patterns. Remove one set." $LINENO
    fi

    if [ "$tSplit" -eq 1 ]; then
        # Done this way because '>' is not passed properly to fCmd
        if [ "$gpDebug" -eq 0 ]; then
            fCmd "cat ${pFile}-[0-9][0-9][0-9] >$pFile"
        else
            cat "${pFile}-[0-9][0-9][0-9]" >$pFile
        fi
    fi

    if [ "$tMin" -eq 1 ]; then
        fCmd "ffmpeg -f concat -safe 0 -i \
                 <(printf \"file '$PWD/%s'\n\" ${tBase}-[0-9][0-9][0-9].$tExt) \
                 -c copy $pFile"
    fi

    fDuration "$pFile"
} # fJoin

# Main --------------------------------------------------------------
export gErr gpDebug cName cVer gpVerbose PWD

# -------------------
# Set name of this script
# Note: this does not work if the script is executed with '.'
cName=${0##*/}

# -------------------
# Setup log variables
export gpDebug=0
export gpVerbose=""
export gpLog=0
export gErr=0

# -------------------
# Define the version number for this script
export cVer='$Revision: 1.10 $'
cVer=${cVer#*' '}
cVer=${cVer%' '*}

# -------------------
# Get Options Section
if [ $# -eq 0 ]; then
    fError "Missing options." $LINENO
fi
export gpFile=""
export gpDuration=0
export gpJoin=0
export gpMin=0
export gpSize=0
export tNumOpt=0
while getopts :djm:s:hlxv tArg; do
    case $tArg in
        d)
            gpDuration=1
            let ++tNumOpt
            ;;
        j)
            gpJoin=1
            let ++tNumOpt
            ;;
        m)
            gpMin=$OPTARG
            let ++tNumOpt
            ;;
        s)
            gpSize=$OPTARG
            let ++tNumOpt
            ;;

        h) fUsage long ;;
        l) gpLog=1 ;;
        v) gpVerbose="-v" ;;
        x) let gpDebug=gpDebug+1 ;;
        :) fError "Value required for option: $OPTARG" $LINENO ;;
        \?) fError "Unknown option: $OPTARG" $LINENO ;;
    esac
done
let tOptInd=OPTIND-1
shift $tOptInd
if [ $# -eq 0 ]; then
    fError "Missing file name" $LINENO
fi
if [ $# -ne 1 ]; then
    fError "Only one file name is allowed." $LINENO
fi
gpFile="$1"

# -------------------
# Validate Options Section

if ! which ffmpeg &>/dev/null; then
    fError "Could not find: ffmpeg" $LINENO
fi

if ! which split &>/dev/null; then
    fError "Could not find: split" $LINENO
fi

if [ "$tNumOpt" -ne 1 ]; then
    fError "Must include one of -d, -j, -m, or -s" $LINENO
fi

# -------------------
# Functional Section

if [ "$gpDuration" -ne 0 ]; then
    fDuration "$gpFile"
    exit 0
fi

if [ "$gpSize" -ne 0 ]; then
    fSplit "$gpFile" "$gpSize"
    exit 0
fi

if [ "$gpMin" -ne 0 ]; then
    fMin "$gpFile" "$gpMin"
    exit 0
fi

if [ "$gpJoin" -ne 0 ]; then
    fJoin "$gpFile"
    exit 0
fi
